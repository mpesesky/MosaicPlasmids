Steps used to analyze mosaic plasmid properties (Figures 2, 3, and S1, and Table S1 )

----Identify Mosaic Plasmids---- 
1) Download release catalog from ftp://ftp.ncbi.nlm.nih.gov/refseq/release/plasmid

2) Concatenate nucleotide fasta files (plasmid.1.1.genomic.fna, plasmid.2.1.genomic.fna, etc)  into single fasta (ncbi_plasmid.fna)

3) Created a BLAST database from ncbi_plasmid.fna, using BLAST command line tools version 2.2.31+ (BLAST) and the command `makeblastdb -in ncbi_plasmid.fna -dbtype nucl -out ncbi_plasmid`.

4) Found identical regions between plasmids using the BLAST command `blastn -query ncbi_plasmid.fna -db ncbi_plasmid -perc_identity 100 -outfmt 6 -num_threads 8 -out perfect_plasmid_matches.txt`

	a) Filtered out self-matches and matches of <500 nucleotides with custom script `python blast_filtering.py -n -l 500 perfect_plasmid_matches.txt > filtered_matches.txt`

5) Found near identical plasmid sequences using the BLAST command `blastn -query ncbi_plasmid.fna -db ncbi_plasmid -perc_identity 95.32 -outfmt 6 -num_threads 8 -out perc_95.32.txt`

	a) Filtered out matches not covering the full plasmid length using custom script `python blast_filtering.py -s ncbi_plasmid.fna -c 100 perc_95.32.txt > perc_95.32.fullLength.txt`.

8) Tabulated mosaic plasmids with custom script `python split_mosaic.py -f perc_95.32.fullLength.txt -c plasmid_character.txt ncbi_plasmid.fna filtered_matches.txt` 


----Identify plasmid characteristics----
1) Concatenate Genbank flat files (plasmid.1.1.genomic.gbff, plasmid.2.1.genomic.gbff, etc)  into single GenBank flat file (ncbi_plasmid.gbff)

2) Gathered environment information using custom script `python retrieve_environments.py ncbi_plasmid.gbff -o plasmid_environments.txt`. NOTE: Due to low numbers of records with usable environment information, this information was not used for any analysis in the final manuscript.

3) Downloaded the IS26 nucleotide sequence from ISFinder (https://www-is.biotoul.fr/scripts/ficheIS.php?name=IS26)

	a) Identified plasmids containing exact nucleotide matches to the cononical IS26 seqeunce with the BLAST command `blastn -query is26.fna -db ncbi_plasmid -perc_identity 100 -outfmt 6 -num_threads 8 -out IS26_results.txt`.
	b) Filtered out matches not covering the full IS26 transposase sequence with custom script `python blast_filtering.py -n -l 704 IS26_results.txt > IS26_results_complete.txt`.
	c) Tabulated plasmids containing the IS26 transposase with the custom script `python split_IS26.py -c IS26_table.txt ncbi_plasmid.fna IS26_results_complete.txt`.

4) Tabulated Plasmid lengths with the custom script `python build_len_table.py`.

5) The source organism for each plasmid was extracted from the plasmid catalog using Excel. NOTE: An example organism table (organisms.txt) used in this study is provided.

----Combine tables and analyze----
1) Where the tables generated above did not already have headers, these were added by hand. In all cases the header for the column of plasmid accession numbers is 'locus'

2) Combined tabulated plasmid information with `bash build_MasterTable`

3) Built table and figure of mosaic plasmids per genus with custom script `python mosaic_taxonomy.py -c 10 -o MosaicGenus10.tsv MasterTable.txt` (Figure 2).

	a) Improper source bacteria names, such as 'Onion', 'Plasmid', or 'uncultured' were removed manually.
	b) The Borreliella genus was merged with Borrelia at this time, to reflect that it contains the same organisms and the Borreliella classification does not yet have standing.
	c) [Enterobacter] and [Haemophilus] were merged with Enterobacter and Haemophilus.
	d) A column was added to this table for proportion intergenus mosaic plasmids, calculated for each genus below.
	e) The resulting table is Table S1.

4) Calculated proportion intergenus plasmids using the script `python organism_counts.py`, which requires the 'organisms.txt' and 'links.txt' files from the circos directory.

----Transposase and Resistance gene information----
1) Ran a HMMER search of the appropriate database (Resfams or custom transposase database) usign the command `hmmscan -o $1.txt --tblout $1_table.txt --max --cpu 16 $1.hmm ncbi_plasmid.faa`, where $1 is the base name of the database. For Resfams the flag `--cut_ga` was also used.

2) Filtered out low scoring hits using the command `python hmm_table_tools.py -m 0.0001 -f ncbi_plasmid.faa -g ncbi_plasmid.gbff -e $1_filtered_table.txt $1_table.txt` where $1 is the base name of the database, and the minimum evalue of 0.0001 was determined empirically.

3) Calculated the gene class proportions per plasmid using the command `python character_by_gene.py -c -P -m -t 10 -o $1_proportion_table.tsv MasterTable.txt $1_filtered_table.txt`, where $1 is the same as above.

4) Created the gene proportion distribution figure (Figure 3) with the command `python geneDistribution.py -b 20 -g character -l "desired x-axis label" -o proportion_histogram.png -L -c 10 $1_proportion_table.tsv Gene_proportion` where $1 is the same as above.

----Length distribution----
1) Make Length distribution histogram (Figure S1) using command `python lengthDistribution.py`

